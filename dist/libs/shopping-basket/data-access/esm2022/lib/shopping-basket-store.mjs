import { patchState, signalStore, withComputed, withMethods, withState } from '@ngrx/signals';
import { ShoppingBasketControllerService } from '@sale-taxes-fe/api';
import { computed, inject } from '@angular/core';
import { rxMethod } from '@ngrx/signals/rxjs-interop';
import { delay, pipe, switchMap, tap } from 'rxjs';
import { tapResponse } from '@ngrx/operators';
export var CallState;
(function (CallState) {
    CallState[CallState["init"] = 0] = "init";
    CallState[CallState["loading"] = 1] = "loading";
    CallState[CallState["loaded"] = 2] = "loaded";
    CallState[CallState["error"] = 3] = "error";
})(CallState || (CallState = {}));
export const ShoppingBasketStore = signalStore(withState({
    products: [],
    callState: CallState.init
}), withMethods((state) => {
    const shoppingBasketControllerService = inject(ShoppingBasketControllerService);
    return {
        // action
        getShoppingBasket: rxMethod(
        // effect
        pipe(tap(() => {
            patchState(state, {
                callState: CallState.loading
            });
        }), switchMap((id) => shoppingBasketControllerService.getShoppingBasket(id).pipe(
        // Added to show the loading indicator
        delay(1000), tapResponse({
            next: (response) => {
                // success reducer
                patchState(state, {
                    products: response.products,
                    callState: CallState.loaded
                });
            },
            error: (error) => {
                // error reducer
                console.error('Could not get shoppingBasket' + ': ' + error);
                patchState(state, {
                    callState: CallState.error
                });
            }
        })))))
    };
}), 
// custom entries and selectors
withComputed(({ products }) => ({
    totalShelfPrice: computed(() => +products().reduce((acc, a) => {
        return acc + (a.shelfPrice || 0);
    }, 0).toFixed(2)),
    totalSalesTaxes: computed(() => +products().reduce((acc, a) => {
        return acc + ((a.shelfPrice || 0) - (a.price || 0));
    }, 0).toFixed(2))
})));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcHBpbmctYmFza2V0LXN0b3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9zaG9wcGluZy1iYXNrZXQvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9zaG9wcGluZy1iYXNrZXQtc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUF5QywrQkFBK0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzVHLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU5QyxNQUFNLENBQU4sSUFBWSxTQUtYO0FBTEQsV0FBWSxTQUFTO0lBQ25CLHlDQUFNLENBQUE7SUFDTiwrQ0FBUyxDQUFBO0lBQ1QsNkNBQVEsQ0FBQTtJQUNSLDJDQUFPLENBQUE7QUFDVCxDQUFDLEVBTFcsU0FBUyxLQUFULFNBQVMsUUFLcEI7QUFFRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxXQUFXLENBQzVDLFNBQVMsQ0FBQztJQUNSLFFBQVEsRUFBRSxFQUFrQjtJQUM1QixTQUFTLEVBQUUsU0FBUyxDQUFDLElBQUk7Q0FDMUIsQ0FBQyxFQUVGLFdBQVcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ3BCLE1BQU0sK0JBQStCLEdBQUcsTUFBTSxDQUFDLCtCQUErQixDQUFDLENBQUM7SUFFaEYsT0FBTztRQUNMLFNBQVM7UUFDVCxpQkFBaUIsRUFBRSxRQUFRO1FBQ3pCLFNBQVM7UUFDVCxJQUFJLENBQ0YsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUNQLFVBQVUsQ0FBQyxLQUFLLEVBQUU7Z0JBQ2hCLFNBQVMsRUFBRSxTQUFTLENBQUMsT0FBTzthQUM3QixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsRUFDRixTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLCtCQUErQixDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUk7UUFDMUUsc0NBQXNDO1FBQ3RDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFDWCxXQUFXLENBQUM7WUFDVixJQUFJLEVBQUUsQ0FBQyxRQUFtQyxFQUFFLEVBQUU7Z0JBQzVDLGtCQUFrQjtnQkFDbEIsVUFBVSxDQUFDLEtBQUssRUFBRTtvQkFDaEIsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRO29CQUMzQixTQUFTLEVBQUUsU0FBUyxDQUFDLE1BQU07aUJBQzVCLENBQUMsQ0FBQztZQUNMLENBQUM7WUFDRCxLQUFLLEVBQUUsQ0FBQyxLQUFjLEVBQUUsRUFBRTtnQkFDeEIsZ0JBQWdCO2dCQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixHQUFHLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQztnQkFDN0QsVUFBVSxDQUFDLEtBQUssRUFBRTtvQkFDaEIsU0FBUyxFQUFFLFNBQVMsQ0FBQyxLQUFLO2lCQUMzQixDQUFDLENBQUM7WUFDTCxDQUFDO1NBQ0YsQ0FBQyxDQUNILENBQUMsQ0FDSCxDQUNGO0tBRUYsQ0FBQztBQUVKLENBQUMsQ0FBQztBQUVGLCtCQUErQjtBQUMvQixZQUFZLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLGVBQWUsRUFBRSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQzdCLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVCLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNuQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25CLGVBQWUsRUFBRSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDNUQsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNsQixDQUFDLENBQUMsQ0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGF0Y2hTdGF0ZSwgc2lnbmFsU3RvcmUsIHdpdGhDb21wdXRlZCwgd2l0aE1ldGhvZHMsIHdpdGhTdGF0ZSB9IGZyb20gJ0BuZ3J4L3NpZ25hbHMnO1xyXG5pbXBvcnQgeyBHZXRTaG9wcGluZ0Jhc2tldFJlc3BvbnNlLCBQcm9kdWN0RFRPLCBTaG9wcGluZ0Jhc2tldENvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnQHNhbGUtdGF4ZXMtZmUvYXBpJztcclxuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyByeE1ldGhvZCB9IGZyb20gJ0BuZ3J4L3NpZ25hbHMvcnhqcy1pbnRlcm9wJztcclxuaW1wb3J0IHsgZGVsYXksIHBpcGUsIHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRhcFJlc3BvbnNlIH0gZnJvbSAnQG5ncngvb3BlcmF0b3JzJztcclxuXHJcbmV4cG9ydCBlbnVtIENhbGxTdGF0ZSB7XHJcbiAgJ2luaXQnLFxyXG4gICdsb2FkaW5nJyxcclxuICAnbG9hZGVkJyxcclxuICAnZXJyb3InXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTaG9wcGluZ0Jhc2tldFN0b3JlID0gc2lnbmFsU3RvcmUoXHJcbiAgd2l0aFN0YXRlKHtcclxuICAgIHByb2R1Y3RzOiBbXSBhcyBQcm9kdWN0RFRPW10sXHJcbiAgICBjYWxsU3RhdGU6IENhbGxTdGF0ZS5pbml0XHJcbiAgfSksXHJcblxyXG4gIHdpdGhNZXRob2RzKChzdGF0ZSkgPT4ge1xyXG4gICAgY29uc3Qgc2hvcHBpbmdCYXNrZXRDb250cm9sbGVyU2VydmljZSA9IGluamVjdChTaG9wcGluZ0Jhc2tldENvbnRyb2xsZXJTZXJ2aWNlKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAvLyBhY3Rpb25cclxuICAgICAgZ2V0U2hvcHBpbmdCYXNrZXQ6IHJ4TWV0aG9kPG51bWJlcj4oXHJcbiAgICAgICAgLy8gZWZmZWN0XHJcbiAgICAgICAgcGlwZShcclxuICAgICAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHBhdGNoU3RhdGUoc3RhdGUsIHtcclxuICAgICAgICAgICAgICBjYWxsU3RhdGU6IENhbGxTdGF0ZS5sb2FkaW5nXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgICBzd2l0Y2hNYXAoKGlkKSA9PiBzaG9wcGluZ0Jhc2tldENvbnRyb2xsZXJTZXJ2aWNlLmdldFNob3BwaW5nQmFza2V0KGlkKS5waXBlKFxyXG4gICAgICAgICAgICAvLyBBZGRlZCB0byBzaG93IHRoZSBsb2FkaW5nIGluZGljYXRvclxyXG4gICAgICAgICAgICBkZWxheSgxMDAwKSxcclxuICAgICAgICAgICAgdGFwUmVzcG9uc2Uoe1xyXG4gICAgICAgICAgICAgIG5leHQ6IChyZXNwb25zZTogR2V0U2hvcHBpbmdCYXNrZXRSZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gc3VjY2VzcyByZWR1Y2VyXHJcbiAgICAgICAgICAgICAgICBwYXRjaFN0YXRlKHN0YXRlLCB7XHJcbiAgICAgICAgICAgICAgICAgIHByb2R1Y3RzOiByZXNwb25zZS5wcm9kdWN0cyxcclxuICAgICAgICAgICAgICAgICAgY2FsbFN0YXRlOiBDYWxsU3RhdGUubG9hZGVkXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGVycm9yOiAoZXJyb3I6IHVua25vd24pID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIGVycm9yIHJlZHVjZXJcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvdWxkIG5vdCBnZXQgc2hvcHBpbmdCYXNrZXQnICsgJzogJyArIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHBhdGNoU3RhdGUoc3RhdGUsIHtcclxuICAgICAgICAgICAgICAgICAgY2FsbFN0YXRlOiBDYWxsU3RhdGUuZXJyb3JcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICkpXHJcbiAgICAgICAgKVxyXG4gICAgICApXHJcblxyXG4gICAgfTtcclxuXHJcbiAgfSksXHJcblxyXG4gIC8vIGN1c3RvbSBlbnRyaWVzIGFuZCBzZWxlY3RvcnNcclxuICB3aXRoQ29tcHV0ZWQoKHsgcHJvZHVjdHMgfSkgPT4gKHtcclxuICAgIHRvdGFsU2hlbGZQcmljZTogY29tcHV0ZWQoKCkgPT5cclxuICAgICAgK3Byb2R1Y3RzKCkucmVkdWNlKChhY2MsIGEpID0+IHtcclxuICAgICAgICByZXR1cm4gYWNjICsgKGEuc2hlbGZQcmljZSB8fCAwKTtcclxuICAgICAgfSwgMCkudG9GaXhlZCgyKSksXHJcbiAgICB0b3RhbFNhbGVzVGF4ZXM6IGNvbXB1dGVkKCgpID0+ICtwcm9kdWN0cygpLnJlZHVjZSgoYWNjLCBhKSA9PiB7XHJcbiAgICAgIHJldHVybiBhY2MgKyAoKGEuc2hlbGZQcmljZSB8fCAwKSAtIChhLnByaWNlIHx8IDApKTtcclxuICAgIH0sIDApLnRvRml4ZWQoMikpXHJcbiAgfSkpXHJcbik7XHJcbiJdfQ==