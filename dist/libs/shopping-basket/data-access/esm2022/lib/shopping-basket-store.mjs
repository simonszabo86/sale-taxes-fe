import { patchState, signalStore, withComputed, withMethods, withState } from '@ngrx/signals';
import { ShoppingBasketControllerService } from '@sale-taxes-fe/api';
import { computed, inject } from '@angular/core';
import { rxMethod } from '@ngrx/signals/rxjs-interop';
import { pipe, switchMap } from 'rxjs';
import { tapResponse } from '@ngrx/operators';
export const ShoppingBasketStore = signalStore(withState({
    products: [],
    callState: 'init'
}), withMethods((state) => {
    const shoppingBasketControllerService = inject(ShoppingBasketControllerService);
    return {
        // action
        getShoppingBasket: rxMethod(
        // effect
        pipe(switchMap((id) => shoppingBasketControllerService.getShoppingBasket(id)), tapResponse({
            next: (response) => {
                // success reducer
                console.log("response: ", response);
                patchState(state, {
                    products: response.products,
                    callState: 'loaded'
                });
            },
            error: (error) => {
                // error reducer
                const errorMessage = 'Could not get shoppingBasket';
                patchState(state, {
                    callState: { error: errorMessage }
                });
                console.error(errorMessage + ': ' + error);
            }
        })))
    };
}), withComputed(({ products }) => ({
    totalShelfPrice: computed(() => +products().reduce((acc, a) => {
        return acc + (a.shelfPrice || 0);
    }, 0).toFixed(2)),
    totalSalesTaxes: computed(() => +products().reduce((acc, a) => { return acc + ((a.shelfPrice || 0) - (a.price || 0)); }, 0).toFixed(2))
})));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcHBpbmctYmFza2V0LXN0b3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9zaG9wcGluZy1iYXNrZXQvZGF0YS1hY2Nlc3Mvc3JjL2xpYi9zaG9wcGluZy1iYXNrZXQtc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUF5QywrQkFBK0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzVHLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFJOUMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsV0FBVyxDQUM1QyxTQUFTLENBQUM7SUFDUixRQUFRLEVBQUUsRUFBa0I7SUFDNUIsU0FBUyxFQUFFLE1BQW1CO0NBQy9CLENBQUMsRUFFRixXQUFXLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNwQixNQUFNLCtCQUErQixHQUFHLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0lBRWhGLE9BQU87UUFDTCxTQUFTO1FBQ1QsaUJBQWlCLEVBQUUsUUFBUTtRQUN6QixTQUFTO1FBQ1QsSUFBSSxDQUNGLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsK0JBQStCLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDeEUsV0FBVyxDQUFDO1lBQ1YsSUFBSSxFQUFFLENBQUMsUUFBbUMsRUFBRSxFQUFFO2dCQUM1QyxrQkFBa0I7Z0JBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUNwQyxVQUFVLENBQUMsS0FBSyxFQUFFO29CQUNoQixRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVE7b0JBQzNCLFNBQVMsRUFBRSxRQUFRO2lCQUNwQixDQUFDLENBQUM7WUFDTCxDQUFDO1lBQ0QsS0FBSyxFQUFFLENBQUMsS0FBYyxFQUFFLEVBQUU7Z0JBQ3hCLGdCQUFnQjtnQkFDaEIsTUFBTSxZQUFZLEdBQUcsOEJBQThCLENBQUM7Z0JBQ3BELFVBQVUsQ0FBQyxLQUFLLEVBQUU7b0JBQ2hCLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUU7aUJBQ25DLENBQUMsQ0FBQztnQkFDSCxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUM7WUFDN0MsQ0FBQztTQUNGLENBQUMsQ0FDSCxDQUNGO0tBRUYsQ0FBQztBQUVKLENBQUMsQ0FBQyxFQUVGLFlBQVksQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUIsZUFBZSxFQUFFLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FDN0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDNUIsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ25DLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkIsZUFBZSxFQUFFLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN2SSxDQUFDLENBQUMsQ0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGF0Y2hTdGF0ZSwgc2lnbmFsU3RvcmUsIHdpdGhDb21wdXRlZCwgd2l0aE1ldGhvZHMsIHdpdGhTdGF0ZSB9IGZyb20gJ0BuZ3J4L3NpZ25hbHMnO1xyXG5pbXBvcnQgeyBHZXRTaG9wcGluZ0Jhc2tldFJlc3BvbnNlLCBQcm9kdWN0RFRPLCBTaG9wcGluZ0Jhc2tldENvbnRyb2xsZXJTZXJ2aWNlIH0gZnJvbSAnQHNhbGUtdGF4ZXMtZmUvYXBpJztcclxuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyByeE1ldGhvZCB9IGZyb20gJ0BuZ3J4L3NpZ25hbHMvcnhqcy1pbnRlcm9wJztcclxuaW1wb3J0IHsgcGlwZSwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRhcFJlc3BvbnNlIH0gZnJvbSAnQG5ncngvb3BlcmF0b3JzJztcclxuXHJcbmV4cG9ydCB0eXBlIENhbGxTdGF0ZSA9ICdpbml0JyB8ICdsb2FkaW5nJyB8ICdsb2FkZWQnIHwgeyBlcnJvcjogc3RyaW5nIH07XHJcblxyXG5leHBvcnQgY29uc3QgU2hvcHBpbmdCYXNrZXRTdG9yZSA9IHNpZ25hbFN0b3JlKFxyXG4gIHdpdGhTdGF0ZSh7XHJcbiAgICBwcm9kdWN0czogW10gYXMgUHJvZHVjdERUT1tdLFxyXG4gICAgY2FsbFN0YXRlOiAnaW5pdCcgYXMgQ2FsbFN0YXRlXHJcbiAgfSksXHJcblxyXG4gIHdpdGhNZXRob2RzKChzdGF0ZSkgPT4ge1xyXG4gICAgY29uc3Qgc2hvcHBpbmdCYXNrZXRDb250cm9sbGVyU2VydmljZSA9IGluamVjdChTaG9wcGluZ0Jhc2tldENvbnRyb2xsZXJTZXJ2aWNlKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAvLyBhY3Rpb25cclxuICAgICAgZ2V0U2hvcHBpbmdCYXNrZXQ6IHJ4TWV0aG9kPG51bWJlcj4oXHJcbiAgICAgICAgLy8gZWZmZWN0XHJcbiAgICAgICAgcGlwZShcclxuICAgICAgICAgIHN3aXRjaE1hcCgoaWQpID0+IHNob3BwaW5nQmFza2V0Q29udHJvbGxlclNlcnZpY2UuZ2V0U2hvcHBpbmdCYXNrZXQoaWQpKSxcclxuICAgICAgICAgIHRhcFJlc3BvbnNlKHtcclxuICAgICAgICAgICAgbmV4dDogKHJlc3BvbnNlOiBHZXRTaG9wcGluZ0Jhc2tldFJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgLy8gc3VjY2VzcyByZWR1Y2VyXHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXNwb25zZTogXCIsIHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICBwYXRjaFN0YXRlKHN0YXRlLCB7XHJcbiAgICAgICAgICAgICAgICBwcm9kdWN0czogcmVzcG9uc2UucHJvZHVjdHMsXHJcbiAgICAgICAgICAgICAgICBjYWxsU3RhdGU6ICdsb2FkZWQnXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiAoZXJyb3I6IHVua25vd24pID0+IHtcclxuICAgICAgICAgICAgICAvLyBlcnJvciByZWR1Y2VyXHJcbiAgICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gJ0NvdWxkIG5vdCBnZXQgc2hvcHBpbmdCYXNrZXQnO1xyXG4gICAgICAgICAgICAgIHBhdGNoU3RhdGUoc3RhdGUsIHtcclxuICAgICAgICAgICAgICAgIGNhbGxTdGF0ZTogeyBlcnJvcjogZXJyb3JNZXNzYWdlIH1cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSArICc6ICcgKyBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKVxyXG4gICAgICApXHJcblxyXG4gICAgfTtcclxuXHJcbiAgfSksXHJcblxyXG4gIHdpdGhDb21wdXRlZCgoeyBwcm9kdWN0cyB9KSA9PiAoe1xyXG4gICAgdG90YWxTaGVsZlByaWNlOiBjb21wdXRlZCgoKSA9PlxyXG4gICAgICArcHJvZHVjdHMoKS5yZWR1Y2UoKGFjYywgYSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBhY2MgKyAoYS5zaGVsZlByaWNlIHx8IDApO1xyXG4gICAgICB9LCAwKS50b0ZpeGVkKDIpKSxcclxuICAgIHRvdGFsU2FsZXNUYXhlczogY29tcHV0ZWQoKCkgPT4gK3Byb2R1Y3RzKCkucmVkdWNlKChhY2MsIGEpID0+IHsgcmV0dXJuIGFjYyArICgoYS5zaGVsZlByaWNlIHx8IDApIC0gKGEucHJpY2UgfHwgMCkpIH0sIDApLnRvRml4ZWQoMikpXHJcbiAgfSkpXHJcbik7XHJcbiJdfQ==